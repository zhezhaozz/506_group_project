) %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
# create a correlation table
cor_mat = cor(cor_mat, use = "na.or.complete")
cor_mat
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_mat = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
# create a correlation table
cor_mat = cor(cor_mat, use = "pairwise.complete.obs")
cor_mat
# create a correlation table
cor_mat = cor(cor_mat, use = "complete.obs")
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_mat = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
# create a correlation table
cor_mat = cor(cor_mat, use = "complete.obs")
cor_mat
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_df = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
# create a correlation table
cor_mat = cor(cor_df, use = "complete.obs")
?cor.test
cor_mat
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_df = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
drop_na() %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
# create a correlation table
cor_mat = cor(cor_df, use = "complete.obs")
# create a correlation table
cor_mat = cor(cor_df)
cor_mat
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_df = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
drop_na() %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
# create a correlation table
cor_mat = cor(cor_df)
cor_mat
cor_df
cor_df
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_df = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence)
cor_df
cor_df = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
drop_na(.)
cor_df
# question 4 -------------------------------------------------------------------
# Examine the correlation matrix of the variables, and create table
# select variables interested
cor_df = df %>%
mutate(l2educ = log(education_spending, base = 2),
l2gni = log(gni, base = 2)
) %>%
select(hdi, l2educ, l2gni, dependency_young, high_violence) %>%
drop_na()
cor_df
# create a correlation table
cor_mat = cor(cor_df)
cor_mat
t
class(t)
t = as_tibble(t) %>%
mutate(id = c(1,2))
t
t = as_tibble(t) %>%
mutate(coefficients = c("intercept","high_violence"))
t
# construct the summary table
t = simple_sum$coefficients
t = as_tibble(t) %>%
mutate(coefficients = c("intercept","high_violence"))
# construct the summary table
t = simple_sum$coefficients
t = as_tibble(t) %>%
mutate(coefficients = c("intercept","high_violence")) %>%
pivot_longer(-coefficients,
names_to = "measures",
values_to = "simple model")
t
knitr::kable(t, digits = 3) %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T) %>%
collapse_rows(1)
cor.test(df$hdi, df$school_life_exp)
cor.test(df$hdi, df$hdi)
cor_mat
cor_table = tibble(0, ncol = 4, nrow = 25)
cor_table
?tibble
cor_table = tibble(matrix(0, ncol = 4, nrow = 25))
cor_table
names(cor_table) = c("row", "column", "correlation", "p-value")
cor_table = as_tibble(matrix(0, ncol = 4, nrow = 25))
names(cor_table) = c("row", "column", "correlation", "p-value")
cor_table
?as_tibble
cor_table = as_tibble(matrix(0, ncol = 4, nrow = 25), .name_repair = "minimal")
cor_table
names(cor_table) = c("row", "column", "correlation", "p-value")
cor_table
?mapply
cor_table$row = mapply(rep, names(cor_df), each = 5)
names(cor_df)
cor_table$row = mapply(rep, each = 5, names(cor_df), )
cor_table$row = mapply(rep, each = 5, names(cor_df) )
mapply(rep, 1:4, 4:1)
sapply(names(cor_df)
)
sapply(names(cor_df), rep
)
cor_table$row = rep( names(cor_df), each = 5 )
cor_table
cor_table$column = rep( names(cor_df), 5 )
cor_table
cor_table = as_tibble(matrix(0, ncol = 4, nrow = 20), .name_repair = "minimal")
names(cor_table) = c("row", "column", "correlation", "p-value")
cor_table = as_tibble(matrix(0, ncol = 4, nrow = 25), .name_repair = "minimal")
names(cor_table) = c("row", "column", "correlation", "p-value")
cor_table$row = rep( names(cor_df), each = 5 )
cor_table$column = rep( names(cor_df), 5 )
cor_table
cor_mat
cor_table$correlation = cbind(cor_table$correlation[1, ], cor_table$correlation[2, ],
cor_table$correlation[3, ], cor_table$correlation[3, ],
cor_table$correlation[5, ])
cor_table$correlation[1, ]
cor_table$correlation = cbind(cor_mat[1, ], cor_mat[2, ],cor_mat[3, ],
cor_mat[3, ], cor_mat[5, ])
cor_mat[1, ]
cbind(cor_mat[1, ], cor_mat[2, ],cor_mat[3, ],
cor_mat[3, ], cor_mat[5, ])
rbind(cor_mat[1, ], cor_mat[2, ],cor_mat[3, ],
cor_mat[3, ], cor_mat[5, ])
c(cor_mat[1, ], cor_mat[2, ],cor_mat[3, ],
cor_mat[3, ], cor_mat[5, ])
cor_table$correlation = c(cor_mat[1, ], cor_mat[2, ],cor_mat[3, ],
cor_mat[3, ], cor_mat[5, ])
cor_table
names(cor_df)
h = c()
for(i in names(cor_df)) {
h = append(h, cor.test(cor_df$hdi ,cor_df$i))
}
cor_df$i
i
cor_df
for(i in 1:5) {
h = append(h, cor.test(cor_df$hdi ,cor_df[,1]))
}
for(i in 1:5) {
h = append(h, cor.test(cor_df$hdi ,cor_df[,i]))
}
cor_df[,i]
cor_df$hdi
length(cor_df$hdi)
length(cor_df[,i])
cor_df[,i]
for(i in 1:5) {
h = append(h, cor.test(cor_df$hdi ,unlist(cor_df[,i])))
}
h
c = cor.test(cor_df$hdi ,unlist(cor_df[,i]))
unlist(cor_df[,i])
length(unlist(cor_df[,i]))
h = c()
edu = c()
g = c()
dy = c()
hv = c()
for(i in 1:5) {
h = append(h, cor.test(cor_df$hdi ,unlist(cor_df[,i]))$p.value )
edu = append(h, cor.test(cor_df$l2educ ,unlist(cor_df[,i]))$p.value )
g = append(h, cor.test(cor_df$l2gni ,unlist(cor_df[,i]))$p.value )
dy = append(h, cor.test(cor_df$dependency_young ,unlist(cor_df[,i]))$p.value )
hv = append(h, cor.test(cor_df$high_violence ,unlist(cor_df[,i]))$p.value )
}
cor_table$`p-value` = c(h, edu, g, dy, hv)
c(h, edu, g, dy, hv)
h
h = c()
edu = c()
g = c()
dy = c()
hv = c()
for(i in 1:5) {
h = append(h, cor.test(cor_df$hdi ,unlist(cor_df[,i]))$p.value )
edu = append(edu, cor.test(cor_df$l2educ ,unlist(cor_df[,i]))$p.value )
g = append(g, cor.test(cor_df$l2gni ,unlist(cor_df[,i]))$p.value )
dy = append(dy, cor.test(cor_df$dependency_young ,unlist(cor_df[,i]))$p.value )
hv = append(hv, cor.test(cor_df$high_violence ,unlist(cor_df[,i]))$p.value )
}
cor_table$`p-value` = c(h, edu, g, dy, hv)
cor_table
knitr::kable(cor_table, digits = 3) %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T) %>%
collapse_rows(1)
knitr::kable(t, digits = 3) %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T) %>%
collapse_rows(1)
knitr::kable(cor_table, digits = 3) %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T) %>%
collapse_rows(1)
install.packages('mvtnorm')
library(mvtnorm)
# part c
# if x is not normal
set.seed(2019)
n = 1e6
p = 5
sig = 1 * diag(p)
x = rmvt(n, mu = c(0,0,0,0,0), Sigma = sig)
# install.packages('mvtnorm')
library(mvtnorm)
x = rmvt(n, mu = c(0,0,0,0,0), Sigma = sig)
?rmvt
x = rmvt(n, Sigma = sig, df = 4)
x = rmvt(n, sigma = sig, df = 4)
beta = c( 6, -1, 3.5, 8, 7.6)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
equa_list = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
equa_list[[i]] = ele
}
x = rmvt(n, sigma = sig, df = 4)
# part c
# if x is not normal
set.seed(2019)
n = 1e6
p = 5
sig = 1 * diag(p)
x = rmvt(n, sigma = sig, df = 4)
x
beta = c( 6, -1, 3.5, 8, 7.6)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
f
y = f + e
equa_list = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
equa_list[[i]] = ele
}
# part c
# if x is not normal
set.seed(2019)
n = 1e6
p = 3
sig = 1 * diag(p)
x = rmvt(n, sigma = sig, df = 4)
beta = c( 6, 3.5, 7.6)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
equa_list = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
equa_list[[i]] = ele
}
# part c
# if x is not normal
set.seed(2019)
n = 1e5
p = 3
sig = 1 * diag(p)
x = rmvt(n, sigma = sig, df = 4)
beta = c( 6, 3.5, 7.6)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
equa_list = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
equa_list[[i]] = ele
}
E_y = Reduce("+", equa_y) / length(equa_y)
E_y = Reduce("+", equa_list) / length(equa_list)
norm(E_y - hessian, "F")
# part c
# if x is not normal
set.seed(2019)
n = 1e5
p = 3
sig = 1 * diag(p)
x = rmvt(n, sigma = sig, df = 30)
beta = c( 6, 3.5, 7.6)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
equa_list = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
equa_list[[i]] = ele
}
E_y = Reduce("+", equa_list) / length(equa_list)
norm(E_y - hessian, "F")
library(MASS)
?eigen
n = 1e5
p = 5
# part d
set.seed(2019)
n = 1e5
p = 5
sig = 1 * diag(p)
x = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = sig)
beta = c( 6, 3.5, 7.6)
beta = c( 6, 3.5, 7.6, 1.2, 2)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
xx = x[i,] %*% t(x[i,])
xx = x[1,] %*% t(x[1,])
ele = (y[1] - mean(y) ) * xx
eigen(ele)
-9.023896e+01
1.111548e-14
1.111548e-4
# part d
set.seed(2019)
n = 1e5
p = 5
sig = 1 * diag(p)
x = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = sig)
beta = c( 6, 3.5, 7.6, 1.2, 2)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
beta_hat = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
beta_hat[[i]] = eigen(ele)$vector[,1]
}
sum( ( beta - beta_hat )^2 ) / n
beta_hat
beta
s = 0
for(j in 1:length(beta_hat)) {
s = s + sum( ( beta - beta_hat[[j]] )^2 )
}
s / n
# part d
set.seed(2019)
n = 1e6
p = 5
sig = 1 * diag(p)
x = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = sig)
beta = c( 6, 3.5, 7.6, 1.2, 2)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
# part d
set.seed(2019)
n = 1e6
p = 5
sig = 1 * diag(p)
x = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = sig)
beta = c( 6, 3.5, 7.6, 1.2, 2)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
e = rnorm(n)
y = f + e
beta_hat = list()
for(i in 1:n) {
xx = x[i,] %*% t(x[i,])
ele = (y[i] - mean(y) ) * xx
beta_hat[[i]] = eigen(ele)$vector[,1]
}
s = 0
for(j in 1:length(beta_hat)) {
s = s + sum( ( beta - beta_hat[[j]] )^2 )
}
s / n
library(data.table)
library(magrittr)
analysis_dt = fread("cleaned_data.csv")
# matrix plot ------------------------------------------------------------------
pairs( ~avg_sys_bp + gender + age + bmi + sleep + smoke + workhrs +
alchol, data = analysis_dt, main = "simple matrix plot for Systolic blood pressure")
analysis_dt = fread("cleaned_data.csv")
setwd("~/Desktop/Math_Courses/Umich/506/506_group_project/zzhaozhe")
analysis_dt = fread("cleaned_data.csv")
# matrix plot ------------------------------------------------------------------
pairs( ~avg_sys_bp + gender + age + bmi + sleep + smoke + workhrs +
alchol, data = analysis_dt, main = "simple matrix plot for Systolic blood pressure")
pairs( ~avg_dia_bp + gender + age + bmi + sleep + smoke + workhrs +
alchol, data = analysis_dt, main = "simple matrix plot for Diastolic blood pressure")
par(mfrow = c(2,2))
## added variable plot for age
lm_a = lm(avg_sys_bp ~ gender + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_y_age = rstandard(lm_a)
lm_a_x = lm(age ~ gender + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_x_age = rstandard(lm_a_x)
plot(residual_x_age, residual_y_age) # added variable plot given age
# age has non linear pattern
## added variable plot for bmi
lm_b = lm(avg_sys_bp ~ gender + age + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_y_bmi = rstandard(lm_b)
lm_b_x = lm(bmi ~ gender + age + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_x_bmi = rstandard(lm_b_x)
plot(residual_x_bmi, residual_y_bmi) # added variable plot given age
## added variable plot for sleep
lm_s = lm(avg_sys_bp ~ gender + age + bmi + smoke + workhrs + alchol,
data = analysis_dt)
residual_y_sleep = rstandard(lm_s)
lm_s_x = lm(sleep ~ gender + age + bmi + smoke + workhrs + alchol,
data = analysis_dt)
residual_x_sleep = rstandard(lm_s_x)
plot(residual_x_sleep, residual_y_sleep) # added variable plot given age
## added variable plot for alcohol
lm_al = lm(avg_sys_bp ~ gender + age + sleep + smoke + workhrs + bmi,
data = analysis_dt)
residual_y_alchol = rstandard(lm_al)
lm_al_x = lm(alchol ~ gender + age + sleep + smoke + workhrs + bmi,
data = analysis_dt)
residual_x_alchol = rstandard(lm_al_x)
plot(residual_x_alchol, residual_y_alchol) # added variable plot given age
# non-linear for alchol
par(mfrow = c(2,2))
## added variable plot for age
lm_a = lm(avg_sys_bp ~ gender + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_y_age = rstandard(lm_a)
lm_a_x = lm(age ~ gender + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_x_age = rstandard(lm_a_x)
plot(residual_x_age, residual_y_age) # added variable plot given age
# age has non linear pattern
## added variable plot for bmi
lm_b = lm(avg_sys_bp ~ gender + age + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_y_bmi = rstandard(lm_b)
lm_b_x = lm(bmi ~ gender + age + sleep + smoke + workhrs + alchol,
data = analysis_dt)
residual_x_bmi = rstandard(lm_b_x)
plot(residual_x_bmi, residual_y_bmi) # added variable plot given age
## added variable plot for sleep
lm_s = lm(avg_sys_bp ~ gender + age + bmi + smoke + workhrs + alchol,
data = analysis_dt)
residual_y_sleep = rstandard(lm_s)
lm_s_x = lm(sleep ~ gender + age + bmi + smoke + workhrs + alchol,
data = analysis_dt)
residual_x_sleep = rstandard(lm_s_x)
plot(residual_x_sleep, residual_y_sleep) # added variable plot given age
## added variable plot for alcohol
lm_al = lm(avg_sys_bp ~ gender + age + sleep + smoke + workhrs + bmi,
data = analysis_dt)
residual_y_alchol = rstandard(lm_al)
lm_al_x = lm(alchol ~ gender + age + sleep + smoke + workhrs + bmi,
data = analysis_dt)
residual_x_alchol = rstandard(lm_al_x)
plot(residual_x_alchol, residual_y_alchol) # added variable plot given age
# non-linear for alchol
