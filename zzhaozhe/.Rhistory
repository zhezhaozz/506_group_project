xx_list[[i]] = xx
}
equa_y =  y - mean(y)
equa_mat = list()
for(j in 1:length(equa_y)){
ele = equa_y[j] * xx_list[[j]]
equa_mat[[j]] = ele
}
E_y = Reduce("+", equa_mat) / length(equa_mat)
norm(E_y - hessian, type = "F")
# part d
beta_hat = eigen(E_y)$vector[,1]
constant = beta_hat/beta
constant
beta_hat
beta_hat/beta
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# part d
beta_hat = eigen(E_y)$vector[,1]
# question 4 -------------------------------------------------------------------
# part b
set.seed(2019)
n = 1e6
p = 5
sig = 1 * diag(p)
x = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = sig)
library(MASS)
library(quantreg)
# install.packages('mvtnorm')
library(mvtnorm)
set.seed(2019)
# question 4 -------------------------------------------------------------------
# part b
set.seed(2019)
n = 1e6
p = 5
sig = 1 * diag(p)
x = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = sig)
beta = c( 6, -1, 3.5, 8, 7.6)
f =  x %*% beta * x %*% beta
hessian = 2 *  ( beta %*% t(beta) )
y = c()
xx_list = list()
for(i in 1:n) {
e = rnorm(1)
y[i] = f[i] + e
xx = x[i,] %*% t(x[i,])
xx_list[[i]] = xx
}
equa_y =  y - mean(y)
equa_mat = list()
for(j in 1:length(equa_y)){
ele = equa_y[j] * xx_list[[j]]
equa_mat[[j]] = ele
}
E_y = Reduce("+", equa_mat) / length(equa_mat)
norm(E_y - hessian, type = "F")
# part d
beta_hat = eigen(E_y)$vector[,1]
constant = beta_hat/beta
constant
constant
# part d
beta_hat = eigen(E_y)$vector[,1]
constant = beta_hat/beta
constant
# part d
beta_hat = eigen(E_y)$vector[,1]
constant = beta_hat/beta
constant
# read the data
dt = fread("cleaned_data.csv")
library(data.table)
# read the data
dt = fread("cleaned_data.csv")
library(magrittr)
library(splines)
library(car)
library(car)
library(effects)
fit_sys = lm( log(avg_sys_bp) ~ workhrs * (bs(age, 5) + gender + bmi + alchol +
sleep + smoke) + smoke:alchol,
data = dt)
summary(fit_sys)
fit_sys = lm( log(avg_sys_bp) ~ workhrs * (age + gender + bmi + bs(alchol, 5) +
sleep + smoke) + smoke:alchol,
data = dt)
summary(fit_sys)
AIC(fit_sys)
fit_sys = lm( log(avg_sys_bp) ~ workhrs * (age + gender + bmi + bs(alchol, 5) +
sleep + smoke) + smoke:alchol,
data = dt)
summary(fit_sys)
AIC(fit_sys)
fit_sys = lm( log(avg_sys_bp) ~ workhrs * (age + gender + bmi + bs(alchol, 5) +
bs(sleep, 5) + smoke) + smoke:alchol,
data = dt)
summary(fit_sys)
AIC(fit_sys)
vif(fit_sys)
par( mfrow = c(2,2) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
plot(Effect("bmi", fit_sys, partial.residuals = TRUE))
plot(Effect("alchol", fit_sys, partial.residuals = TRUE))
plot(Effect("sleep", fit_sys, partial.residuals = TRUE))
# fwrite(full_dt, "full_dt.txt")
full_dt = fread("full_dt.txt")
setwd("~/Desktop/Math_Courses/Umich/600/project")
# fwrite(full_dt, "full_dt.txt")
full_dt = fread("full_dt.txt")
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + settlmnt + livebrth + delmonth +
(1 + agehhmem|basebrgy),
data = full_dt)
library(lme4)
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + settlmnt + livebrth + delmonth +
(1 + agehhmem|basebrgy),
data = full_dt)
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + settlmnt + livebrth + delmonth +
(1|basebrgy),
data = full_dt)
summary(fit_rand)
# regression analysis ----------------------------------------------------------
full_dt = full_dt[, `:=` (settlmnt = as.factor(settlmnt))
]
source('~/Desktop/Math_Courses/Umich/600/project/project_part_2.R', echo=TRUE)
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + settlmnt + livebrth + delmonth +
(1|basebrgy),
data = full_dt)
summary(fit_rand)
full_dt$settlmnt
# regression analysis ----------------------------------------------------------
full_dt = full_dt[, `:=` (settlmnt = as.factor(settlmnt))
]
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + as.factor(settlmnt) + livebrth + delmonth +
(1|as.factor(basebrgy) ),
data = full_dt)
# regression analysis ----------------------------------------------------------
full_dt = full_dt[, `:=` (settlmnt = as.factor(settlmnt))
]
# fwrite(full_dt, "full_dt.txt")
full_dt = fread("full_dt.txt")
# regression analysis ----------------------------------------------------------
full_dt = full_dt[, `:=` (settlmnt = as.factor(settlmnt))
]
View(full_dt)
is.factor(full_dt$settlmnt)
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + as.factor(settlmnt) + livebrth + delmonth +
(1|basebrgy ),
data = full_dt)
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + settlmnt + livebrth + delmonth +
(1|basebrgy ),
data = full_dt)
summary(fit_rand)
rand = full_dt[, `:=` ( basebrgy = as.factor(basebrgy) )]
View(rand)
fit_rand = lmer(bweight ~ sexchild + agehhmem + momweigt + armcircu +
mombody + cmheight + settlmnt + livebrth + delmonth +
(1|basebrgy ),
data = full_dt)
summary(fit_rand)
par( mfrow = c(2,2) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
fit_sys = lm( log(avg_sys_bp) ~ workhrs * (age + gender + bmi + bs(alchol, 5) +
bs(sleep, 5) + smoke) + smoke:alchol,
data = dt)
library(data.table)
library(magrittr)
library(splines)
library(car)
library(effects)
# read the data
dt = fread("cleaned_data.csv")
fit_sys = lm( log(avg_sys_bp) ~ workhrs * (age + gender + bmi + bs(alchol, 5) +
bs(sleep, 5) + smoke) + smoke:alchol,
data = dt)
summary(fit_sys)
AIC(fit_sys)
vif(fit_sys)
par( mfrow = c(2,2) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
plot(Effect("bmi", fit_sys, partial.residuals = TRUE))
plot(Effect("alchol", fit_sys, partial.residuals = TRUE))
plot(Effect("sleep", fit_sys, partial.residuals = TRUE))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# import library
library(data.table)
library(magrittr)
# read in data
recs_table = fread("/Users/Zheng/Desktop/Fall_Semester/Stats_506/hw2/recs2015_public_v4.csv")
setwd("~/Desktop/daxuan")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# import library
library(data.table)
library(magrittr)
# read in data
recs_table = fread("/Users/Zheng/Desktop/Fall_Semester/Stats_506/hw2/recs2015_public_v4.csv")
# import library
library(data.table)
library(magrittr)
# read in data
recs_table = fread("recs2015_public_v4.csv")
class(recs_table)
# data prep - replicate weight
brr_cols = names(recs_table)[ grep('BRRWT', names(recs_table)) ]
cols = c("DOEID", brr_cols)
weights = recs_table[, ..cols]
weights_long = melt(weights, id.vars = c("DOEID"),
measure.vars = brr_cols)
names(weights_long)[2:3] = c("repl", "weight_value")
# NWEIGHT estimate
internet_prop = recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)] %>%
.[,.(prop_est = sum(INTERNET*NWEIGHT)/sum(NWEIGHT)),by = .(DIVISION, UATYP10)]
internet_prop = dcast(internet_prop, DIVISION ~ UATYP10, value.var = "prop_est")
internet_prop = internet_prop[,.(DIVISION, diff_est = abs(R-U)*100)]
# replicate weight prep
internet_prop_rep = weights_long %>%
merge(., recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)], by = "DOEID", all = TRUE)
# replicate standard error
internet_prop_repl = internet_prop_rep[,.(prop = sum(weight_value*INTERNET)/sum(weight_value)),
by = .(DIVISION, UATYP10, repl)]
internet_prop_repl = dcast(internet_prop_repl, DIVISION + repl ~ UATYP10, value.var = "prop")
internet_prop_repl = internet_prop_repl[,.(DIVISION, repl, diff_repl = abs(R-U)*100)]
# join replicate and nweight
internet_join = internet_prop %>%
merge(., internet_prop_repl, by = "DIVISION")
# compute standard error
internet_join = internet_join[, .(diff_est = diff_est[1],
std_err = 2*sqrt(mean({diff_est - diff_repl}^2))),
by = "DIVISION"]
internet_join = internet_join[, .(DIVISION, diff_est, std_err,
lwr = diff_est - qnorm(.975)*std_err,
upr = diff_est + qnorm(.975)*std_err)]
internet_join[order(-diff_est)]
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# import library
library(data.table)
library(magrittr)
# read in data
recs_table = fread("recs2015_public_v4.csv")
class(recs_table)
# data prep - replicate weight
brr_cols = names(recs_table)[ grep('BRRWT', names(recs_table)) ]
cols = c("DOEID", brr_cols)
weights = recs_table[, ..cols]
weights_long = melt(weights, id.vars = c("DOEID"),
measure.vars = brr_cols)
names(weights_long)[2:3] = c("repl", "weight_value")
# NWEIGHT estimate
internet_prop = recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)] %>%
.[,.(prop_est = sum(INTERNET*NWEIGHT)/sum(NWEIGHT)),by = .(DIVISION, UATYP10)]
internet_prop = dcast(internet_prop, DIVISION ~ UATYP10, value.var = "prop_est")
internet_prop = internet_prop[,.(DIVISION, diff_est = abs(R-U)*100)]
# replicate weight prep
internet_prop_rep = weights_long %>%
merge(., recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)], by = "DOEID", all = TRUE)
# replicate standard error
internet_prop_repl = internet_prop_rep[,.(prop = sum(weight_value*INTERNET)/sum(weight_value)),
by = .(DIVISION, UATYP10, repl)]
internet_prop_repl = dcast(internet_prop_repl, DIVISION + repl ~ UATYP10, value.var = "prop")
internet_prop_repl = internet_prop_repl[,.(DIVISION, repl, diff_repl = abs(R-U)*100)]
# join replicate and nweight
internet_join = internet_prop %>%
merge(., internet_prop_repl, by = "DIVISION")
# compute standard error
internet_join = internet_join[, .(diff_est = diff_est[1],
std_err = 2*sqrt(mean({diff_est - diff_repl}^2))),
by = "DIVISION"]
internet_join = internet_join[, .(DIVISION, diff_est, std_err,
lwr = diff_est - qnorm(.975)*std_err,
upr = diff_est + qnorm(.975)*std_err)]
internet_join[order(-diff_est)]
# command line in LINUX
# head -n 100 GSE138311_series_matrix.txt
# grep -n "series_matrix_table_begin" GSE138311_series_matrix.txt
# return line 68
# So there are 68 lines of header information.
# only keep line69 or below
# tail -n +69 GSE138311_series_matrix.txt > new.txt
# read in the DNA.txt file with header info removed
DNA_table = fread("/Users/Zheng/Desktop/Fall_Semester/Stats_506/hw5/new.txt")
outcome = original_T[, .(probe_group, p_value = (test+1)/(1000+1))]
original_T
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# import library
library(data.table)
library(magrittr)
# read in data
recs_table = fread("recs2015_public_v4.csv")
class(recs_table)
# data prep - replicate weight
brr_cols = names(recs_table)[ grep('BRRWT', names(recs_table)) ]
cols = c("DOEID", brr_cols)
weights = recs_table[, ..cols]
weights_long = melt(weights, id.vars = c("DOEID"),
measure.vars = brr_cols)
names(weights_long)[2:3] = c("repl", "weight_value")
# NWEIGHT estimate
internet_prop = recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)] %>%
.[,.(prop_est = sum(INTERNET*NWEIGHT)/sum(NWEIGHT)),by = .(DIVISION, UATYP10)]
internet_prop = dcast(internet_prop, DIVISION ~ UATYP10, value.var = "prop_est")
internet_prop = internet_prop[,.(DIVISION, diff_est = abs(R-U)*100)]
# replicate weight prep
internet_prop_rep = weights_long %>%
merge(., recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)], by = "DOEID", all = TRUE)
# replicate standard error
internet_prop_repl = internet_prop_rep[,.(prop = sum(weight_value*INTERNET)/sum(weight_value)),
by = .(DIVISION, UATYP10, repl)]
internet_prop_repl = dcast(internet_prop_repl, DIVISION + repl ~ UATYP10, value.var = "prop")
internet_prop_repl = internet_prop_repl[,.(DIVISION, repl, diff_repl = abs(R-U)*100)]
# join replicate and nweight
internet_join = internet_prop %>%
merge(., internet_prop_repl, by = "DIVISION")
# compute standard error
internet_join = internet_join[, .(diff_est = diff_est[1],
std_err = 2*sqrt(mean({diff_est - diff_repl}^2))),
by = "DIVISION"]
internet_join = internet_join[, .(DIVISION, diff_est, std_err,
lwr = diff_est - qnorm(.975)*std_err,
upr = diff_est + qnorm(.975)*std_err)]
internet_join[order(-diff_est)]
# command line in LINUX
# head -n 100 GSE138311_series_matrix.txt
# grep -n "series_matrix_table_begin" GSE138311_series_matrix.txt
# return line 68
# So there are 68 lines of header information.
# only keep line69 or below
# tail -n +69 GSE138311_series_matrix.txt > new.txt
# read in the DNA.txt file with header info removed
DNA_table = fread("/Users/Zheng/Desktop/Fall_Semester/Stats_506/hw5/new.txt")
outcome
original_T
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# import library
library(data.table)
library(magrittr)
# read in data
recs_table = fread("recs2015_public_v4.csv")
class(recs_table)
# data prep - replicate weight
brr_cols = names(recs_table)[ grep('BRRWT', names(recs_table)) ]
cols = c("DOEID", brr_cols)
weights = recs_table[, ..cols]
weights_long = melt(weights, id.vars = c("DOEID"),
measure.vars = brr_cols)
names(weights_long)[2:3] = c("repl", "weight_value")
# NWEIGHT estimate
internet_prop = recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)] %>%
.[,.(prop_est = sum(INTERNET*NWEIGHT)/sum(NWEIGHT)),by = .(DIVISION, UATYP10)]
internet_prop = dcast(internet_prop, DIVISION ~ UATYP10, value.var = "prop_est")
internet_prop = internet_prop[,.(DIVISION, diff_est = abs(R-U)*100)]
# replicate weight prep
internet_prop_rep = weights_long %>%
merge(., recs_table[, .(DOEID, UATYP10 = ifelse(UATYP10=='C','U',UATYP10),
DIVISION, INTERNET, NWEIGHT)], by = "DOEID", all = TRUE)
# replicate standard error
internet_prop_repl = internet_prop_rep[,.(prop = sum(weight_value*INTERNET)/sum(weight_value)),
by = .(DIVISION, UATYP10, repl)]
internet_prop_repl = dcast(internet_prop_repl, DIVISION + repl ~ UATYP10, value.var = "prop")
internet_prop_repl = internet_prop_repl[,.(DIVISION, repl, diff_repl = abs(R-U)*100)]
# join replicate and nweight
internet_join = internet_prop %>%
merge(., internet_prop_repl, by = "DIVISION")
# compute standard error
internet_join = internet_join[, .(diff_est = diff_est[1],
std_err = 2*sqrt(mean({diff_est - diff_repl}^2))),
by = "DIVISION"]
internet_join = internet_join[, .(DIVISION, diff_est, std_err,
lwr = diff_est - qnorm(.975)*std_err,
upr = diff_est + qnorm(.975)*std_err)]
internet_join[order(-diff_est)]
# read in the DNA.txt file with header info removed
DNA_table = fread("/Users/Zheng/Desktop/Fall_Semester/Stats_506/hw5/new.txt")
setwd("~/Desktop/Math_Courses/Umich/506/PS/506_ps5")
# read in the DNA.txt file with header info removed
DNA_table = fread("q5dt.txt")
# read in the DNA.txt file with header info removed
DNA_table = fread("q5dt.txt")
# read in the DNA.txt file with header info removed
DNA_table = fread("q5dt.txt")
setwd("~/Desktop")
# read in the DNA.txt file with header info removed
DNA_table = fread("q5dt.txt")
# read in the DNA.txt file with header info removed
DNA_table = fread("q5dt.txt")
setwd("~/Desktop/Math_Courses/Umich/506/PS/506_ps5")
# read in the DNA.txt file with header info removed
DNA_table = fread("q5dt.txt")
setwd("~/Desktop/Math_Courses/Umich/506/506_group_project/zzhaozhe")
getwd()
par( mfrow = c(2,2) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
plot(Effect("bmi", fit_sys, partial.residuals = TRUE))
plot(Effect("alchol", fit_sys, partial.residuals = TRUE))
plot(Effect("sleep", fit_sys, partial.residuals = TRUE))
par( mfrow = c(1,4) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
plot(Effect("bmi", fit_sys, partial.residuals = TRUE))
plot(Effect("alchol", fit_sys, partial.residuals = TRUE))
plot(Effect("sleep", fit_sys, partial.residuals = TRUE))
par( mfrow = c(2,1) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
plot(Effect("bmi", fit_sys, partial.residuals = TRUE))
plot(Effect("alchol", fit_sys, partial.residuals = TRUE))
plot(Effect("sleep", fit_sys, partial.residuals = TRUE))
par( mfrow = c(2,2) )
plot(Effect("age", fit_sys, partial.residuals = TRUE))
plot(Effect("bmi", fit_sys, partial.residuals = TRUE))
plot(Effect("alchol", fit_sys, partial.residuals = TRUE))
plot(Effect("sleep", fit_sys, partial.residuals = TRUE))
# check variance pre -----------------------------------------------------------
## systolic bp
## the result of prefit will not be shown in write-up
pre_sys_fit = lm(avg_sys_bp ~ gender + age + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
analysis_dt = fread("cleaned_data.csv")
# check variance pre -----------------------------------------------------------
## systolic bp
## the result of prefit will not be shown in write-up
pre_sys_fit = lm(avg_sys_bp ~ gender + age + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
summary(pre_sys_fit)
mean(c(1,2,3,NA), na.rm = TRUE)
# would difference between work overtimes but sleep well and work overtimes while
# sleep less significant?
dt = dt[, .(wgt = 1)]
# read the data
dt = fread("cleaned_data.csv")
# would difference between work overtimes but sleep well and work overtimes while
# sleep less significant?
dt = dt[, wgt := 1]
dt
dt
a = seq(18, 80, length.out=100)
a
length(18:60)
d_fake_8hrs = dt[1:100, workhrs := 1]
# matrix plot ------------------------------------------------------------------
pairs( ~avg_sys_bp + gender + age + bmi + sleep + smoke + workhrs +
alchol, data = analysis_dt, main = "simple matrix plot for Systolic blood pressure")
## added variable plot for bmi
lm_b = lm(avg_sys_bp ~ gender + age + sleep + smoke + workhrs + alchol,
data = analysis_dt)
# check variance pre -----------------------------------------------------------
## systolic bp
## the result of prefit will not be shown in write-up
pre_sys_fit = lm(avg_sys_bp ~ gender + age + bmi + sleep + smoke + workhrs + alchol,
data = analysis_dt)
summary(pre_sys_fit)
View(analysis_dt)
# read the data
dt = fread("cleaned_data.csv")
z-criticle = qnorm(0.975)
z_criticle = qnorm(0.975)
# would difference between work overtimes but sleep for 8 hours and work overtimes
# while sleep for 5 hours less significant?
dt = dt[, wgt := 1]
d_fake_8hrs = dt[, `:=` (workhrs = 1, sleep = 8, wgt := 0)] # make fake data with contrast
# would difference between work overtimes but sleep for 8 hours and work overtimes
# while sleep for 5 hours less significant?
dt = dt[, wgt := 1]
d_fake_8hrs = dt[, `:=` (workhrs = 1, sleep = 8, wgt = 0)] # make fake data with contrast
d_fake_5hrs = dt[, `:=` (workhrs = 1, sleep = 5, wgt = 0)] # make fake data with contrast
dx = rbindlist( list(dt, d_fake_8hrs, d_fake_5hrs) ) # combine tru data with fake data
result = lm( log(avg_sys_bp) ~ workhrs * (age + gender + bmi + bs(alchol, 5) +
bs(sleep, 5) + smoke) + smoke:alchol,
weights = wgt, data = dx) # fit regression with zero weights on fake data
pa = coef(result) # parameters
cm = vcov(result) # covariance matrix
dm = model.matrix(result) # design matrix
nx = 238
ct = dm[ (nx+1):(n+2*nx), ]
ct = dm[ (nx+1):(nx+2*nx), ]
ct = ct[1:nx,] - ct[(nx+1):2*nx, ] # get the contrast
2*nx
ct = ct[1:nx,] - ct[(nx+1):(2*nx), ] # get the contrast
znum = ct %*% pa # numerator of z-score
zdenom = sqrt(diag(ct %*% cm %*% t(ct))) # denominator of z-score
zscores = znum / zdenom
z_criticle = qnorm(0.975)
{zscores > z_criticle}
zscores
znum
ct
dm
dx
View(dx)
View(dt)
# read the data
dt = fread("cleaned_data.csv")
View(dt)
# would difference between work overtimes but sleep for 8 hours and work overtimes
# while sleep for 5 hours less significant?
dt = dt[, wgt := 1]
View(dt)
d_fake_8hrs = dt[, `:=` (workhrs = 1, sleep = 8, wgt = 0)] # make fake data with contrast
d_fake_5hrs = dt[, `:=` (workhrs = 1, sleep = 5, wgt = 0)] # make fake data with contrast
View(dt)
View(dt)
